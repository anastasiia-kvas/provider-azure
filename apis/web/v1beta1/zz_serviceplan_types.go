/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServicePlanObservation struct {

	// The ID of the Service Plan.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A string representing the Kind of Service Plan.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Whether this is a reserved Service Plan Type. true if os_type is Linux, otherwise false.
	Reserved *bool `json:"reserved,omitempty" tf:"reserved,omitempty"`
}

type ServicePlanParameters struct {

	// The ID of the App Service Environment to create this Service Plan in.
	// +kubebuilder:validation:Optional
	AppServiceEnvironmentID *string `json:"appServiceEnvironmentId,omitempty" tf:"app_service_environment_id,omitempty"`

	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	// +kubebuilder:validation:Optional
	MaximumElasticWorkerCount *float64 `json:"maximumElasticWorkerCount,omitempty" tf:"maximum_elastic_worker_count,omitempty"`

	// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The O/S type for the App Services to be hosted in this plan. Possible values include Windows, Linux, and WindowsContainer. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	OsType *string `json:"osType" tf:"os_type,omitempty"`

	// Should Per Site Scaling be enabled. Defaults to false.
	// +kubebuilder:validation:Optional
	PerSiteScalingEnabled *bool `json:"perSiteScalingEnabled,omitempty" tf:"per_site_scaling_enabled,omitempty"`

	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The SKU for the plan. Possible values include B1, B2, B3, D1, F1, I1, I2, I3, I1v2, I2v2, I3v2, P1v2, P2v2, P3v2, P1v3, P2v3, P3v3, S1, S2, S3, SHARED, EP1, EP2, EP3, WS1, WS2, WS3, and Y1.
	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// A mapping of tags which should be assigned to the AppService.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of Workers (instances) to be allocated.
	// +kubebuilder:validation:Optional
	WorkerCount *float64 `json:"workerCount,omitempty" tf:"worker_count,omitempty"`

	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ZoneBalancingEnabled *bool `json:"zoneBalancingEnabled,omitempty" tf:"zone_balancing_enabled,omitempty"`
}

// ServicePlanSpec defines the desired state of ServicePlan
type ServicePlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicePlanParameters `json:"forProvider"`
}

// ServicePlanStatus defines the observed state of ServicePlan.
type ServicePlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicePlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePlan is the Schema for the ServicePlans API. Manages an App Service: Service Plan.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServicePlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicePlanSpec   `json:"spec"`
	Status            ServicePlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePlanList contains a list of ServicePlans
type ServicePlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicePlan `json:"items"`
}

// Repository type metadata.
var (
	ServicePlan_Kind             = "ServicePlan"
	ServicePlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServicePlan_Kind}.String()
	ServicePlan_KindAPIVersion   = ServicePlan_Kind + "." + CRDGroupVersion.String()
	ServicePlan_GroupVersionKind = CRDGroupVersion.WithKind(ServicePlan_Kind)
)

func init() {
	SchemeBuilder.Register(&ServicePlan{}, &ServicePlanList{})
}
